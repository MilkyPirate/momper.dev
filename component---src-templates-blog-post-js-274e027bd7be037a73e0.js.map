{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPostTemplate","props","state","tldr","render","post","this","data","markdownRemark","siteTitle","site","siteMetadata","title","pageContext","previous","next","location","frontmatter","description","excerpt","style","marginTop","rhythm","scale","display","marginBottom","date","tags","length","map","tag","index","Fragment","key","to","replace","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","React","Component","pageQuery"],"mappings":"6OAOMA,E,oBACJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,MAAM,GAHS,E,0GAMnBC,OAAA,WACE,IAAMC,EAAOC,KAAKL,MAAMM,KAAKC,eACvBC,EAAYH,KAAKL,MAAMM,KAAKG,KAAKC,aAAaC,MAF7C,EAGoBN,KAAKL,MAAMY,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KAElB,OACE,kBAAC,IAAD,CAAQC,SAAUV,KAAKL,MAAMe,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CACEG,MAAOP,EAAKY,YAAYL,MACxBM,YAAab,EAAKY,YAAYC,aAAeb,EAAKc,UAEpD,wBACEC,MAAO,CACLC,UAAWC,YAAO,OAGnBjB,EAAKY,YAAYL,OAEpB,uBACEQ,MAAK,iBACAG,aAAM,IADN,CAEHC,QAAQ,QACRC,aAAcH,YAAO,GACrBD,UAAWC,aAAQ,MAGpBjB,EAAKY,YAAYS,KARpB,IASIrB,EAAKY,YAAYU,MAAQtB,EAAKY,YAAYU,KAAKC,OAC7C,yCAEGvB,EAAKY,YAAYU,KAAKE,KAAI,SAACC,EAAKC,EAAN,OAAcH,EAAd,EAAcA,OAAd,OACzB,kBAAC,IAAMI,SAAP,CAAgBC,IAAKH,GACnB,kBAAC,IAAD,CAAMI,GAAE,SAAWJ,EAAIK,QAAQ,KAAK,MAASL,GAAYC,IAAUH,EAAS,EAAnB,KAA8B,SAJ7F,MASA,MAGN,yBAAKQ,wBAAyB,CAAEC,OAAQhC,EAAKiC,QAC7C,wBACElB,MAAO,CACLK,aAAcH,YAAO,MAGzB,wBACEF,MAAO,CACLK,aAAc,EACdD,QAAQ,OACRe,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACG5B,GACC,kBAAC,IAAD,CAAMoB,GAAE,QAAUpB,EAAS6B,OAAOC,KAAQC,IAAI,QAA9C,KACK/B,EAASG,YAAYL,QAI9B,4BACGG,GACC,kBAAC,IAAD,CAAMmB,GAAE,QAAUnB,EAAK4B,OAAOC,KAAQC,IAAI,QACvC9B,EAAKE,YAAYL,MADpB,U,GAxEiBkC,IAAMC,WAmFtB/C,YAER,IAAMgD,EAAS","file":"component---src-templates-blog-post-js-274e027bd7be037a73e0.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nclass BlogPostTemplate extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tldr: false,\n    }\n  }\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <h1\n          style={{\n            marginTop: rhythm(1 / 4)\n          }}\n        >\n          {post.frontmatter.title}\n        </h1>\n        <p\n          style={{\n            ...scale(-1 / 5),\n            display: `block`,\n            marginBottom: rhythm(1),\n            marginTop: rhythm(-1),\n          }}\n        >\n          {post.frontmatter.date} {\n            post.frontmatter.tags && post.frontmatter.tags.length\n            ? <>\n                {`[ `}\n                {post.frontmatter.tags.map((tag, index, {length}) => \n                  <React.Fragment key={tag}>\n                    <Link to={`/tags/${tag.replace(/\\s/,'-')}`}>{tag}</Link>{index !== length - 1 ? `, ` : null}\n                  </React.Fragment>\n                )}\n                {` ]`}\n              </> \n            : null\n          }\n        </p>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <ul\n          style={{\n            marginBottom: 0,\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={`/blog${previous.fields.slug}`} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={`/blog${next.fields.slug}`} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}